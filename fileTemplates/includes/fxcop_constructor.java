NAMING


CONVENTIONS
 
-   для операция преобразования типов лучше использовать явный конструктор или фабрику вместо методов трансформации
        - тк нужно показать что в этом случае явно создается объект
        - например, если необъект(элементарный тип) преобразуется в объект
        - в таких операциях можно вызывать ClassCastException

-   если нет конструкторов, дефолтный конструктор нужно задавать явно
        - чтобы не сломался потом существующий код при введении конструктора с параметром 
        тк он автоматически удалит неявный дефолтный конструктор

-   конструкторы ничего не должны делать кроме приема параметров конструктора и установки свойств
        - конструкторы должны вызывать исключения если они требуются

-   нельзя вызывать переопределяемые(обычные или abstract) методы внутри конструктора
        - тк метод может быть переопределен подклассом и при вызове этого метода у еще неинициализированного подкласса из базового класса будет ошибка
        - можно вызывать super.someMethod() тк будет вызываться непереопределяемая версия
        - см паттерн приватных методов вызывающися из переопределяемых методов

-   следует предпочитать конструкторы фабрикам
        - конструктор это самый естественный способ создания объектов: в результате работы конструктора: будет создан, инициализирован и возвращен уникальный экземпляр класса определенного типа
        - юзеры будут искать их прежде чем найдут фабричные методы
        - для фабрик не работает автоподстановка в IDE
        - фабрики жертвуют возможностью обнаружения, удобством и простотой использования
        - большинство юзеров находят что шаблон конструктора более простой и лучше поддается обнаружению, потому что юзеры привыкли к объектам созданным конструкторами


ПАТТЕРН NEW-SET-CALL В МУТАБЕЛЬНЫХ КЛАССАХ

-   должен быть дефолтный конструктор по-умолчанию
        - рекомендуется проектировать компоненты так чтобы они могли использоваться после очень простой инициализации
        - конструкторы которые не принимают параметры называют конструкторами по умолчанию или дефолтными конструкторами
        
-   может быть очень простой конструктор с одним параметром (параметрами основных свойств)
        - нужно использовать параметры конструктора для установки основных свойств
        - не должно быть сложных конструкторов тк большинство параметров инициализируются через выставление свойств
        - все параметры конструктора соответствуют свойствам и просто инициализируют их

-   всегда должна быть возможность выбора:
	    1) вызвать конструктор с параметрами, поэтому следует сделать конструктор с параметрами задающими все свойства
	    2) вызвать дефолтный конструктор но затем установить свойства через сетеры

-   названия параметров конструктора должны совпадать с названиями свойств
        - кроме регистра первой буквы
	    
-   простые задачи одного основного сценария должны быть выполнимы с помощью только одного объекта
        -   нельзя чтобы юзеры создавали экземпляры нескольких объектов в одном сценарии
        -   у каждого из 5 лучших основных сценариев, должно быть не больше одного оператора new 

-   возможные проблемы: конструктор по умолчанию позволяет пользователям создать недо-инициализированный экземпляр
        - что может привести к недопустимому состоянию объекта при вызове метода
        - проблемы должны быть смягчены исключениями/сообщениями об ошибках в методах
        - исключения должны быть вызваны тогда когда операция выполняется а не когда компонент инициализируется

ПАТТЕРН NEW-CALL В неМУТАБЕЛЬНЫХ КЛАССАХ

-   следует проектировать типы так чтобы объекты не могли существовать в недопустимом состоянии
        - поэтому следует проверять консистентность объекта в конструкторе и вызывать IllegalStateException 

-   в конструкторе сразу задаются все параметры требуемые для настройки объекта
        - настройки не могут быть изменены после инициализации в конструкторе  
 
ПРЕИМУЩЕСТВА ФАБРИКИ

1)  singleton
        - метод возвращающий синглетон должен называться getInstance

2)  builder

3)  сборка объекта

4)  кеширование

5)  совместное использование объектов

6)  когда конкретный подтип возвращаемого типа будет известен только рантайм
        - недостаток конструкторов, то что вы не можете динамически, во время выполнения разрешить тип того, что возвращаете, 
        и при этом не можете возвратить ранее распределенный экземпляр класса(например закешированный). 
        - Если я уверен что никогда не буду нуждаться в этих возможностях, то конструкторы это лучший выбор
        - создает только экземпляры конкретного типа/подтипа (а не вообще все в разнобой)
        
7)  рекомендуется использовать фабрики, если наличие поименованного метода является единственным способом сделать операцию очевидной
        - тк у конструкторов не может быть названий то иногда при использовании конструктора ощущается недостаток в информации о контексте 
        и вследствие этого юзер плохо себе представляет что делает операция 
        
8)  для операций конвертации Value типов
        - такие методы принимают тип значения в одном представлении и преобразуют его в экземпляр класса другого типа значений, 
        сохраняя то же самое логическое состояние
        - это делается не через конструктор чтобы создание объекта не было заметно, было неявным
        - например,  d=DateTime.Parse('01/02/2019')
        
 
 
ПАТТЕРН ФАБРИЧНЫЙ МЕТОД   


-   часто это статический метод
 
-   часто фабричный метод принадлежит этому же типу, который он и производит
 
-   следует называть метод New+имяСоздаваемогоТипа
        - в java9 методы возвращающие немутабельные копии коллекций называются "of"
 
ПАТТЕРН ФАБРИЧНЫЙ ТИП / АБСТРАКТНАЯ ФАБРИКА
 
-   это тип с абстрактным фабричным методом

-   фабричный метод возвращает динамически определяемый подкласс

-   следует называть тип  имяСоздаваемогоТипа+Factory    