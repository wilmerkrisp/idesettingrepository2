<templateSet group="PATTERNS_design">
  <template name="pd_template2" value="/**                         final template f_method&#10; * &lt;pre&gt;{@code&#10; *&#10; * &#10; * example 1&#10; *              1) put this method into parent class&#10; *              2) CREATE SUBPROGRAMM: call methodOne1, methodTwo2 from template method&#10; *              3) override methodOne1, methodTwo2 in the subclass&#10; *&#10; * example 2&#10; *&#10; *&#10; * &#10; * }&lt;/pre&gt; ПОМНИ СГЕНЕРИТЬ JAVADOC MAC8+fixDocComment И УБРАТЬ ЭТОТ ТЕКСТ&#10; */&#10;//      public privateFinal protectedPackage _package_ final&#10;//      throws Exception&#10;//      @Override &#10;public final void f_templateMethod(final String p_1)                    &#10;&#9;{&#10;&#9;//log_.debug   (&quot;$class$ f_method: &quot;+p_1);&#10;&#9;//super.f_method(p_1);&#10;&#9;&#10;&#9;//DEFINE SUBPROGRAMM HERE&#10;&#9;f_methodOne(&quot;step one&quot;);&#10;&#9;f_methodTwo(&quot;step two&quot;);&#10;&#9;//&#9;&#10;&#9;return;&#10;&#9;}&#10;&#10;$END$&#10;/**                          method 1 default stub&#10; * &lt;pre&gt;{@code&#10; *&#10; *&#10; * example 1&#10; * &#10; *              1) method1 overrided in the subclass&#10; *              2) called from template method from superclass&#10; *&#10; * &#10; * example 2&#10; *&#10; *&#10; *&#10; * }&lt;/pre&gt; ПОМНИ СГЕНЕРИТЬ JAVADOC MAC8+fixDocComment И УБРАТЬ ЭТОТ ТЕКСТ&#10; */&#10;//      public privateFinal protectedPackage _package_ final&#10;//      throws Exception&#10;//      @Override &#10;public void f_methodOne(final String p_1)&#10;{&#10;log_.error   (&quot;$class$ PLEASE OVERRIDE THE METHOD f_methodOne: &quot;+p_1);&#10;return;&#10;}&#10;&#10;/**                         method 2 default stub&#10; * &lt;pre&gt;{@code&#10; *&#10; *&#10; * example 1&#10; * &#10; *              1) method2 overrided in the subclass&#10; *              2) called from template method from superclass&#10; *&#10; * &#10; * example 2&#10; *&#10; *&#10; *&#10; * }&lt;/pre&gt; ПОМНИ СГЕНЕРИТЬ JAVADOC MAC8+fixDocComment И УБРАТЬ ЭТОТ ТЕКСТ&#10; */&#10;//      public privateFinal protectedPackage _package_ final&#10;//      throws Exception&#10;//      @Override &#10;public void f_methodTwo(final String p_1)&#10;{&#10;log_.error   (&quot;$class$ PLEASE OVERRIDE THE METHOD f_methodTwo: &quot;+p_1);&#10;return;&#10;} " description="template method on class / see also VI_templateMethod" toReformat="false" toShortenFQNames="true">
    <variable name="class" expression="className()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="pd_state1" value="interface state{};&#10;class state1 implements state {};&#10;class state2 implements state {};&#10;/**                         property keep state&#10; * &lt;pre&gt;{@code&#10; *&#10; *&#10; *&#10; * }&lt;/pre&gt;&#10; */&#10;private state c_state = new state1();&#10;/**                         method for changing state&#10; * &lt;pre&gt;{@code&#10; *&#10; * &#10; * example 1&#10; * &#10; *           1) use methods of state object inside this class, for example      c_state.f_method1()&#10; *           2) for changing state outside call                                 v_class.f_changeState(new state2())&#10; *&#10; * }&lt;/pre&gt; &#10; */&#10;public void f_changeState(final state p_newState)                    &#10;&#9;{&#10;&#9;c_state = p_newState;&#10;&#9;$END$&#10;&#9;} " description="state pattern" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="pd_strategy1" value="interface strategy                         {void process(Object subobject);};&#10;class strategy1 implements strategy        {public void process(Object subobject){} };&#10;class strategy2 implements strategy        {public void process(Object subobject){} };&#10;/**                         static method for using strategy&#10; * &lt;pre&gt;{@code&#10; *&#10; * &#10; * example 1&#10; *&#10; *           1) for applying strategy to some subject                        v_class.f_apply2object(new strategy2() , p_someObject)&#10; *&#10; * }&lt;/pre&gt; &#10; */&#10;public static void f_apply2object(final strategy p_strategy, final Object p_subject)                    &#10;&#9;{&#10;&#9;//apply to object methods from interface: process1(), process2(), process2()...&#10;&#9;p_strategy.process( p_subject );&#10;&#9;$END$&#10;&#9;} " description="strategy pattern" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="pd_factory1" value="/**                         factory method&#10; * &lt;pre&gt;{@code&#10; *&#10; * &#10; * example 1&#10; *              &#10; *              $class$ v_obj=$class$.f_fabricMethod();&#10; *&#10; * example 2&#10; *              &#10; *              1) explitly create PRIVATE default constructor, otherwise java autogenerate PUBLIC default constructor&#10; *              2) all another constructors make PRIVATE&#10; *               &#10; *&#10; * }&lt;/pre&gt;&#10; */&#10;//      private public protected final  &#10;//      throws Exception&#10;public static final $class$ f_fabricMethod()&#10;{&#10;//log_.debug   (&quot;$class$ f_method: &quot;+p_1);&#10;//super.f_method(p_1);&#10;$END$&#10;//&#9;&#10;return new $class$();&#10;}&#10;&#10;/**                         PRIVATE constructor default: NO objects allowed&#10; *                          otherwise java autogenerate PUBLIC default constructor&#10;*/&#10;     //      throws Exception  &#10;    private $class$ ()                           &#10;        {&#10;        //super();  OR this(&quot;&quot;)&#10;        //log_.debug   ( &quot;$class$  NO PUBLIC CONSTRUCTOR ALLOWED: &quot; );&#10;        &#10;        }" description="fabric method get object" toReformat="false" toShortenFQNames="true">
    <variable name="class" expression="className()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="pd_adapter1" value="//              class adapter from an class to the interface&#10;public class Adapter extends fromClass implements toInterface" description="adapter class" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="pd_adapter2" value="/**                         method adapter  from $class$ to VI_some&#10; * &lt;pre&gt;{@code&#10; *&#10; * &#10; * example 1&#10; * &#10; *           1) change VI_some name&#10; *           2) fill VI_some necessary methods&#10; *           3) call $class$ methods inside VI_some methods&#10; *&#10; * example 2&#10; *&#10; *&#10; * &#10; * }&lt;/pre&gt; &#10; */&#10;public VI_some f_getAdapter()                   &#10;&#9;{&#10;&#9;return new VI_some()&#10;&#9;&#9;{&#10;&#9;&#9;public void someMethod(final String p_1)&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;//throw new Exception( &quot;vError&quot; );&#10;&#9;&#9;&#9;//this.f_method(&quot;test&quot;);        //this is avialable&#10;&#9;&#9;&#9;//v_obj;                        //locals FINAL variables is avialable&#10;&#9;&#9;&#9;this.method(p_1);&#10;&#9;&#9;&#9;$END$&#10;&#9;&#9;&#9;}&#10;&#9;&#9;};&#10;&#9;} " description="adapter method get anonym adapter class" toReformat="false" toShortenFQNames="true">
    <variable name="class" expression="className()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="pd_iterator" value="/**                         method iterator (adapter2collection)&#10; * &lt;pre&gt;{@code&#10; *&#10; * &#10; * example 1&#10; *           0) add to class declaration &#10; *              implements Iterable&lt; elements &gt;&#10; *           1) change c_fake property to something useful&#10; *           2) use iterator in LOOPs&#10; *              for( Integer v_i : new thisclass( ) )&#10;*                  log_.debug   (&quot;mainclass main for: &quot;+v_i);&#10; *&#10; * example 2&#10; *&#10; *&#10; * &#10; * }&lt;/pre&gt; &#10; */&#10;public Iterator&lt;$elements$&gt; iterator( )                   &#10;&#9;{&#10;&#9;return new Iterator&lt;$elements$&gt;()&#10;&#9;&#9;{&#10;&#9;&#9;//my oun properties and methods&#10;&#9;&#9;private int     c_index=0;&#10;&#9;&#9;private Integer[]   c_fake={10,20,30};&#10;&#9;&#9;&#10;&#9;&#9;//implemented methods from interface&#10;&#9;&#9;public boolean hasNext()&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;return c_index&lt;c_fake.length;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;public $elements$ next()&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;return c_fake[c_index++];&#10;&#9;&#9;&#9;}&#10;&#9;&#9;public void remove()&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;throw new UnsupportedOperationException(  );&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#10;&#9;&#9;&#10;&#9;&#9;};&#10;&#9;}&#10;$END$" description="iterator method /  adapter2collection" toReformat="false" toShortenFQNames="true">
    <variable name="elements" expression="classNameComplete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="pd_factory2" value="//////////////////////////////////////////////////////////////////////////////////&#10;//&#10;//                              factory (nested class)&#10;//                              VARIANT 1&#10;//&#10;//////////////////////////////////////////////////////////////////////////////////&#10;/**                         factory nested class&#10; *              Fabric - standalone class, loaded by classloader, without loading VV_class itself.&#10; * &lt;pre&gt;{@code&#10; *&#10; * &#10; * example 1&#10; *              Factory&lt;VV_&gt; v_obj=new VV_.Factory();&#10; *&#10; * &#10; * example 2&#10; *              VV_one v_obj = (new VV_one.Factory()).create();&#10; * &#10; * example 3&#10; *              &#10; *              1) explitly create PRIVATE default constructor, otherwise java autogenerate PUBLIC default constructor&#10; *              2) all another constructors make PRIVATE&#10; *              3) put FACTORY nested class inside our&#10; *               &#10; *&#10; * }&lt;/pre&gt;&#10; */&#10;public static final class Factory implements Factory&lt; $class$ &gt;&#10;&#9;{&#10;&#9;@Override&#10;&#9;public $class$ create( )&#10;&#9;&#9;{&#10;&#9;&#9;return new $class$(  );&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;/**                         PRIVATE constructor default: NO objects allowed&#10; *                          otherwise java autogenerate PUBLIC default constructor&#10;*/&#10;     //      throws Exception  &#10;    private $class$ ()                           &#10;        {&#10;        //super();  OR this(&quot;&quot;)&#10;        //log_.debug   ( &quot;$class$  NO PUBLIC CONSTRUCTOR ALLOWED: &quot; );&#10;        &#10;        }&#10;&#10;&#10;//////////////////////////////////////////////////////////////////////////////////&#10;//&#10;//                              factory method&#10;//                              VARIANT 2&#10;//&#10;//////////////////////////////////////////////////////////////////////////////////&#10;/**                         variable singleton factory&#10; *&#10; * &lt;pre&gt;{@code&#10; *&#10; * example 1    &#10; *                      for use in factory method only&#10; * &#10; *&#10; * }&lt;/pre&gt;&#10; *&#10; *&#10; */&#10;//      private public protected _package_ final   &#10;private static final Factory  c_factory = new Factory();&#10;&#10;/**                         factory method &#10; *                          alternative getting factory&#10; * &lt;pre&gt;{@code&#10; *&#10; * example 1&#10; *                      VV_one v_obj&#10; *                      Factory&lt;VV_&gt; v_obj=v_obj.getFactory();&#10; *&#10; * example 2&#10; *&#10; *&#10; * }&lt;/pre&gt;&#10; *&#10; *&#10; */&#10;//      private public protected final  &#10;//      throws Exception&#10;public static Factory f_getFactory()&#10;{&#10;//log_.debug   (&quot;${NAME} f_method: &quot;+p_1);&#10;//super.f_method(p_1);&#10;&#10;//&#9;&#10;return c_factory;&#10;}" description="fabric nested class+method get object" toReformat="false" toShortenFQNames="true">
    <variable name="class" expression="className()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="pd_iterator (get VIEW list ONE type from list ANOTHER type)" value="import com.google.common.collect.AbstractIterator;&#10;&#10;Collection&lt;Integer&gt; someList;&#10;&#10;Collection&lt;String&gt; getListWithoutCreation()&#10;{&#10;return new AbstractCollection&lt;String&gt;() /**здесь лучше вернуть Iterable */&#10;&#9;{&#10;&#9;@Override&#10;&#9;public Iterator&lt;String&gt; iterator()&#10;&#9;&#9;{&#10;&#9;&#9;/**com.google.common.collect.AbstractIterator*/&#10;&#9;&#9;return new AbstractIterator&lt;String&gt;()&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;@Override&#10;&#9;&#9;&#9;protected String computeNext()&#10;&#9;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;return &quot;&quot; + someList.iterator()&#10;&#9;&#9;&#9;&#9;                    .next();&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;};&#10;&#9;&#9;}&#10;&#9;&#10;&#9;@Override&#10;&#9;public int size()&#10;&#9;&#9;{&#10;&#9;&#9;return someList.size();&#10;&#9;&#9;}&#10;&#9;&#10;&#9;//необязательный метод&#10;&#9;@Override&#10;&#9;public boolean remove( Object o )&#10;&#9;&#9;{&#10;&#9;&#9;throw new UnsupportedOperationException();&#10;&#9;&#9;}&#10;&#9;};&#10;}" description="pattern design collection from abstract ITERATOR inner" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
</templateSet>