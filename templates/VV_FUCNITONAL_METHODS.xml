<templateSet group="VV_FUCNITONAL_METHODS">
  <template name="method  FX try" value="// = Success(result) or Failure(exception) &#10;public Try&lt;Integer&gt; divide(Integer dividend, Integer divisor) &#10;&#9;{&#10;&#9;return Try.of(() -&gt; dividend / divisor);&#10;&#9;// todo postcondition check of output result&#10;&#9;}" description="VAVR supplier-&gt;try" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="method FX option" value="public Option&lt;String&gt; $method$( final String string )&#10;&#9;{&#10;&#9;return Option( string ).filter( StringUtils::isNotBlank )&#10;&#9;                       .onEmpty( logAtWarningRunnable( &quot;$class$.$method$(empty argument)&quot; ) )&#10;&#9;                       .map( logAtDebugUnaryOperator( &quot;$class$.$method$&quot; ) )&#10;&#9;                       .flatMap( this::$method$_ );&#10;&#9;// todo postcondition check of output result&#10;&#9;}&#10;&#10;&#10;&#10;public Option&lt;String&gt; $method$_( final String string )&#10;&#9;{&#10;&#9;return Option( &quot;otvet+&quot; + string );&#10;&#9;}" description="VAVR supplier-&gt;try" toReformat="false" toShortenFQNames="true">
    <variable name="class" expression="className()" defaultValue="" alwaysStopAt="false" />
    <variable name="method" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="method  FX option+try" value="public Option&lt;String&gt; $method$( final String string )&#10;{&#10;return Option( string ).filter( StringUtils::isNotBlank )&#10;                       .onEmpty( logAtWarningRunnable( &quot;$class$.$method$(empty argument)&quot; ) )&#10;                       .map( logAtDebugUnaryOperator( &quot;$class$.$method$&quot; ) )&#10;                       .map( CheckedFunction1.liftTry( this::$method$_ ) )&#10;                       .peek( t -&gt; t.onFailure( logAtErrorConsumer(&quot;$class$.$method$&quot;) ) ) //.peek( o -&gt; o.recover( logAtErrorFunction( &quot;$class$.$method$&quot; ) ) )&#10;                       .flatMap(t-&gt;Option( t.getOrNull() ));&#10;// todo postcondition check of output result&#10;}&#10;&#10;&#10;&#10;public String $method$_( final String string )&#10;{&#10;//throw new RuntimeException( &quot; cause &quot; );&#10;return &quot;otvet+&quot; + string;&#10;}&#10;" description="VAVR supplier-&gt;try" toReformat="false" toShortenFQNames="true">
    <variable name="class" expression="className()" defaultValue="" alwaysStopAt="false" />
    <variable name="method" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="method  FX trampoline" value="//System.out.println( &quot;TRAMPOLINE=&quot; + new App().sum( List.of( 1L , 2L , 3L , 4L ) ) );&#10;&#10;public $Long$ sum( List&lt;$Long$&gt; list )&#10;&#9;{&#10;&#9;return sum( 0L , list ).get();&#10;&#9;}&#10;&#10;&#10;&#10;public Trampoline&lt;$Long$&gt; sum( $Long$ acc ,&#10;&#9;                                  List&lt;$Long$&gt; cnt )&#10;&#9;{&#10;&#9;return cnt.isEmpty() ? done( acc ) : more( () -&gt; sum( acc + cnt.head() , cnt.tail() ) );&#10;&#9;}" description="CYCLOPS supplier-&gt;try" toReformat="false" toShortenFQNames="true">
    <variable name="Long" expression="classNameComplete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
</templateSet>