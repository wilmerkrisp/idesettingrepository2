<templateSet group="VV_algo">
  <template name="algo recursion1" value="&#9;/**&#10;&#9; * &#10;&#9; *      !CHANGE_ME_DESCRIPTION!&#10;&#9; * &#10;&#9; * &lt;pre&gt;{@code                   method simple recursia&#10;&#9; *&#10;&#9; * example 1&#10;&#9; *           v_obj.f_recursiveMethodd(10);&#10;&#9; *&#10;&#9; * example 2&#10;&#9; *&#10;&#9; *&#10;&#9; * }&lt;/pre&gt;&#10;&#9; *&#10;&#9; *&#10;&#9; */&#10;&#9;public static void f_recursiveMethodd(final int p_1 )&#10;&#9;&#9;{&#10;&#9;&#9;log_.debug( &quot;${PROJECT_NAME} ${PACKAGE_NAME} recursia start      : &quot; + p_1 );&#10;&#9;&#9;if( p_1 &gt; 0 )&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;f_recursiveMethodd( p_1-1 );&#10;&#9;&#9;&#9;}&#10;&#9;&#9;log_.debug( &quot;${PROJECT_NAME} ${PACKAGE_NAME} recursia end        : &quot; + p_1 );&#10;&#9;&#9;}&#10;" description="method recursia" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="algo thread1" value="package com.wilmer.clock;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;import org.apache.log4j.Logger;&#10;&#10;//&#10;//                          Vladimir Krupskiy (wilmer)&#10;//                          jjtest com.wilmer.clock&#10;//                          13.12.17 21:08&#10;// &#10;//&#10;//  Naming convention:&#10;//  *_isMethod&#9;return bool&#10;//  *_ref&#9;&#9;return ref&#10;//  *_should_&#9;event handling: if possible handle&#10;//  *_will_&#9;&#9;event handling: will handle&#10;//  *_did_&#9;&#9;event handling: did handle&#10;//&#10;//  VC_&#9;&#9;    class&#10;//  VV_         class non mutable value&#10;//  VI_&#9;&#9;    interface&#10;//  VA_&#9;&#9;    abstract class&#10;//  VS_         static class&#10;//  VE_&#9;&#9;    enum&#10;//  VX_         exception&#10;//  VT_         thread&#10;//  *_shared_&#9;singleton&#10;//&#10;//  g_&#9;&#9;    global or static&#10;//  c_&#9;&#9;    class poroperty&#10;//  p_&#9;&#9;    method parameter&#10;//  f_&#9;&#9;    class method&#10;//  v_&#9;&#9;    variable&#10;//  l_&#9;&#9;    lazy load&#10;//  _inBlock&#9;variables inside lambda&#10;//&#10;//&#10;&#10;&#10;&#10;&#10;/**&#10; * class simple&#10; *&#10; * &lt;pre&gt;{@code&#10; *&#10; * example 1&#10; *              VC_clock v_obj = new VC_clock();&#10; *              v_obj.f_test();&#10; *&#10; * example 2&#10; *              ВЫЗЫВАЯ МЕТОДЫ ТИК-ТАК ЭТОГО ОБЪЕКТА В ЛЮБОМ ПОРЯДКЕ, ОНИ ВСЕ РАВНО БУДУТ РАБОТАТЬ ПО ОЧЕРЕДИ&#10; *              вызов из одного потока c_clock.f_tik();&#10; *              вызов из другого потока c_clock.f_tak();&#10; *&#10; * }&lt;/pre&gt;&#10; */&#10;/*public protected-default final       implements VI_ extends VV_   */&#10;public class VC_clock&#10;&#9;{&#10;&#9;&#10;&#9;&#10;&#9;//////////////////////////////////////////////////////////////////////////////////&#10;&#9;//&#10;&#9;//                              variables&#10;&#9;//&#10;&#9;//////////////////////////////////////////////////////////////////////////////////  &#10;&#9;/**&#10;&#9; * log4j debug massage&#10;&#9; *&#10;&#9; * &lt;pre&gt;{@code&#10;&#9; *&#10;&#9; * example 1&#10;&#9; *           log.debug   ( &quot;jjtest com.wilmer.clock VC_clock  &quot; );&#10;&#9; * &#9;        log.info    ( &quot;jjtest com.wilmer.clock VC_clock  &quot; );&#10;&#9; * &#9;        log.warn    ( &quot;jjtest com.wilmer.clock VC_clock  &quot; );&#10;&#9; * &#9;        log.error   ( &quot;jjtest com.wilmer.clock VC_clock  &quot; );&#10;&#9; *&#10;&#9; * example 2&#10;&#9; *&#10;&#9; *&#10;&#9; * }&lt;/pre&gt;&#10;&#9; */&#10;&#9;private static final Logger log_ = Logger.getLogger( VC_clock.class );&#10;&#9;&#10;&#9;/**&#10;&#9; * variable test&#10;&#9; *&#10;&#9; * &lt;pre&gt;{@code&#10;&#9; *&#10;&#9; * example 1&#10;&#9; *           this.c_test&#10;&#9; *&#10;&#9; * example 2&#10;&#9; *&#10;&#9; *&#10;&#9; * }&lt;/pre&gt;&#10;&#9; */&#10;&#9;private String c_test = &quot;init&quot;;                     /* private public protected final */&#10;&#9;&#10;&#9;&#10;&#9;/**&#10;&#9; * variable test&#10;&#9; *&#10;&#9; * &lt;pre&gt;{@code&#10;&#9; *&#10;&#9; * example 1&#10;&#9; *           this.c_test&#10;&#9; *&#10;&#9; * example 2&#10;&#9; *&#10;&#9; *&#10;&#9; * }&lt;/pre&gt;&#10;&#9; */&#10;&#9;private boolean c_tik = true;                     /* private public protected final */&#10;&#9;&#10;&#9;&#10;&#9;//////////////////////////////////////////////////////////////////////////////////&#10;&#9;//&#10;&#9;//                              methods&#10;&#9;//&#10;&#9;//////////////////////////////////////////////////////////////////////////////////  &#10;&#9;&#10;&#9;&#10;&#9;&#10;&#9;&#10;&#9;/**&#10;&#9; * constructor default&#10;&#9; *&#10;&#9; * &lt;pre&gt;{@code&#10;&#9; *&#10;&#9; * exapmle 1&#10;&#9; *           VC_clock v_obj = new VC_clock();&#10;&#9; *&#10;&#9; * example 2&#10;&#9; *&#10;&#9; *&#10;&#9; * }&lt;/pre&gt;&#10;&#9; */&#10;&#9;public VC_clock( )                           /* private public protected   throws Exception */&#10;&#9;&#9;{&#10;&#9;&#9;//super();&#10;&#9;&#9;log_.debug( &quot;jjtest com.wilmer.clock VC_clock  init: &quot; );&#10;&#9;&#9;&#9;&#10;&#9;&#9;}&#10;&#9;&#10;&#9;&#10;&#9;&#10;&#9;&#10;&#9;/**&#10;&#9; * constructor with parameter&#10;&#9; *&#10;&#9; * &lt;pre&gt;{@code&#10;&#9; *&#10;&#9; * exapmle 1&#10;&#9; *           VC_clock v_obj = new VC_clock(&quot;param&quot;);&#10;&#9; *&#10;&#9; * example 2&#10;&#9; *&#10;&#9; *&#10;&#9; * }&lt;/pre&gt;&#10;&#9; */&#10;&#9;public VC_clock( final String p_1 )                 /* private public protected   throws Exception */&#10;&#9;&#9;{&#10;&#9;&#9;//super(p_1);&#10;&#9;&#9;c_test = p_1;&#10;&#9;&#9;}&#10;&#9;&#10;&#9;//////////////////////////////////////////////////////////////////////////////////&#10;&#9;//&#10;&#9;//                              methods&#10;&#9;//&#10;&#9;//////////////////////////////////////////////////////////////////////////////////  &#10;&#9;&#10;&#9;&#10;&#9;&#10;&#9;&#10;&#9;/**&#10;&#9; * method test&#10;&#9; *&#10;&#9; * &lt;pre&gt;{@code&#10;&#9; *&#10;&#9; * example 1&#10;&#9; *           v_obj.f_test();&#10;&#9; *&#10;&#9; * example 2&#10;&#9; *&#10;&#9; *&#10;&#9; * }&lt;/pre&gt;&#10;&#9; */&#10;&#9;public void f_test( )                    /* private public protected final  throws Exception */&#10;&#9;&#9;{&#10;&#9;&#9;//throw new Exception( &quot;vError&quot; );&#10;&#9;&#9;log_.debug( &quot;jjtest com.wilmer.clock VC_clock  f_test: &quot; );&#10;&#9;&#9;//&#10;&#9;&#9;&#10;&#9;&#9;//&#10;&#9;&#9;return;&#10;&#9;&#9;}&#10;&#9;&#10;&#9;&#10;&#9;&#10;&#9;&#10;&#9;/**&#10;&#9; * method test&#10;&#9; *&#10;&#9; * &lt;pre&gt;{@code&#10;&#9; *&#10;&#9; * example 1&#10;&#9; *           v_obj.f_test();&#10;&#9; *&#10;&#9; * example 2&#10;&#9; *&#10;&#9; *&#10;&#9; * }&lt;/pre&gt;&#10;&#9; */&#10;&#9;&#10;&#9;synchronized public void f_tik( )                    /* private public protected final  throws Exception */&#10;&#9;&#9;{&#10;&#9;&#9;//throw new Exception( &quot;vError&quot; );&#10;&#9;&#9;log_.debug( &quot;jjtest com.wilmer.clock VC_clock  TIK: &quot; );&#10;&#9;&#9;&#10;&#9;&#9;try&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;//&#10;&#9;&#9;&#9;if( c_tik )&#10;&#9;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;c_tik = false;&#10;&#9;&#9;&#9;&#9;notify( );&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;while( !c_tik )&#10;&#9;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;wait( );&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;}&#10;&#9;&#9;catch( final InterruptedException p_exception )&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;log_.error( &quot;jjtest com.wilmer.clock VT_tick  Thread interrupted: &quot;  );&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#10;&#9;&#9;&#10;&#9;&#9;//&#10;&#9;&#9;return;&#10;&#9;&#9;}&#10;&#9;&#10;&#9;&#10;&#9;&#10;&#9;&#10;&#9;/**&#10;&#9; * method test&#10;&#9; *&#10;&#9; * &lt;pre&gt;{@code&#10;&#9; *&#10;&#9; * example 1&#10;&#9; *           v_obj.f_test();&#10;&#9; *&#10;&#9; * example 2&#10;&#9; *&#10;&#9; *&#10;&#9; * }&lt;/pre&gt;&#10;&#9; */&#10;&#9;&#10;&#9;synchronized public void f_tak( )                    /* private public protected final  throws Exception */&#10;&#9;&#9;{&#10;&#9;&#9;//throw new Exception( &quot;vError&quot; );&#10;&#9;&#9;log_.debug( &quot;jjtest com.wilmer.clock VC_clock  TAK: &quot; );&#10;&#9;&#9;&#10;&#9;&#9;try&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#10;&#9;&#9;&#9;//&#10;&#9;&#9;&#9;if( !c_tik )&#10;&#9;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;c_tik = true;&#10;&#9;&#9;&#9;&#9;notify( );&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;while( c_tik )&#10;&#9;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;wait( );&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;}&#10;&#9;&#9;catch( final InterruptedException p_exception )&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;log_.error( &quot;jjtest com.wilmer.clock VT_tick  Thread interrupted: &quot; );&#10;&#9;&#9;&#9;}&#10;&#9;&#9;&#10;&#9;&#9;&#10;&#9;&#9;//&#10;&#9;&#9;return;&#10;&#9;&#9;}&#10;&#9;&#9;&#10;&#9;&#9;&#10;&#9;}&#10;" description="thread tik tak algo demo" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="algo regexp1" value="System.out.println( &quot;____________&quot; );&#10;var v_i=0;&#10;var v_buf    = new StringBuffer( );&#10;var      v_regex  =Pattern.compile( &quot;\\w+&quot; );&#10;var      v_finder =v_regex.matcher( &quot; preved vova alsu my &quot; );&#10;while(v_finder.find())&#10;&#9;{&#10;&#9;System.out.println( &quot;_________  ___&quot; );&#10;&#9;System.out.println( &quot;grp:&quot;+ v_finder.group());&#10;&#9;System.out.println( &quot;buf1:&quot;+ v_buf);&#10;&#9;v_finder.appendReplacement(v_buf,String.valueOf( v_i++ )  );&#10;&#9;System.out.println( &quot;buf2:&quot;+ v_buf);&#10;&#9;};&#10;v_finder.appendTail(v_buf );&#10;System.out.println( &quot;buf2_ITOG:&quot;+ v_buf);" description="method regexp find in string" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="algo regexp2" value="/**&#10; * asPredicate проверяет что строка или часть строки соответствует шаблону (работает как s -&gt; this.matcher(s).find())&#10; * asMatchPredicate проверяет что вся строка соответствует шаблону (работает как s -&gt; this.matcher(s).matches())&#10; * */&#10;Pattern nonWordCharacter = Pattern.compile(&quot;\\W&quot;);&#10;Stream&#10;&#9;.of(&quot;Metallica&quot;, &quot;Motörhead&quot;)&#10;&#9;.filter(nonWordCharacter.asPredicate())&#10;&#9;.forEach(System.out::println);" description="method regexp find in string" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="algo swap int values" value="int a=start;&#10;int b=end;&#10;&#10;if(a&gt;b)&#10;&#9;{&#10;&#9;// Swap start and end&#10;&#9;a=a^b;&#10;&#9;b=a^b;&#10;&#9;a=a^b;&#10;&#9;}" description="method" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="algo max" value="var source = new ArrayList&lt;Integer&gt;( List.of( 10 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ) );&#10;var sorted = new ArrayList&lt;Integer&gt;();&#10;Optional&lt;Integer&gt; max=Optional.empty();&#10; &#10;max=source.stream().collect( minBy( Comparator.naturalOrder() ) );&#10;max.ifPresent( sorted::add );" description="stream().collect( minBy( Comparator.naturalOrder() ) );" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="algo set intersect" value="//var intersect = Sets.intersection( station_cover_towns_immutable.get( &quot;one&quot; ) , neddable ); // guava&#10;//var intersect = SetUtils.intersection( station_cover_towns_immutable.get( &quot;one&quot; ) , neddable ); //apache commons" description="ts intersection" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="algo max by comparator" value="//@formatter:off&#10;&#9;&#9;&#9;var station_cover_towns_immutable = Map.&lt;String,Set&lt;String&gt;&gt;of(&#10;&#9;&#9;&#9;&#9;&quot;one&quot; , Set.&lt;String&gt;of( &quot;Moscow&quot; , &quot;London&quot; , &quot;Singapoor&quot; ) ,&#10;&#9;&#9;&#9;&#9;&quot;two&quot; , Set.&lt;String&gt;of( &quot;CyberJay&quot; , &quot;NewYork&quot; , &quot;SanFrancisco&quot; ) );&#10;&#9;&#9;&#9;//@formatter:on&#10;var station_cover_towns = new HashMap&lt;&gt;( station_cover_towns_immutable );&#10;var neddable            = Set.&lt;String&gt;of( &quot;NewYork1&quot; );&#10;&#10; &#10;&#10;Optional&lt;Map.Entry&lt;String,Set&lt;String&gt;&gt;&gt; max = Optional.empty();&#10; &#10;&#10;var comparator1 = new Comparator&lt;Map.Entry&lt;String,Set&lt;String&gt;&gt;&gt;()&#10;&#9;{&#10;&#9;@Override&#10;&#9;public int compare( final Map.Entry&lt;String,Set&lt;String&gt;&gt; o1 ,&#10;&#9;                    final Map.Entry&lt;String,Set&lt;String&gt;&gt; o2 )&#10;&#9;&#9;{&#10;&#9;&#9;return 0;&#10;&#9;&#9;}&#10;&#9;};&#10;&#10;Comparator&lt;Map.Entry&lt;String,Set&lt;String&gt;&gt;&gt; comparator2 = Comparator.comparing( p -&gt; SetUtils.intersection( p.getValue() , neddable )&#10;                                                                                           .size() );&#10;&#10;max = station_cover_towns.entrySet()&#10;                         .stream()&#10;                         .collect( maxBy( comparator2 ) );&#10; &#10;&#10;System.out.println( &quot;Result &quot; + max );" description="stream().collect( minBy( Comparator.naturalOrder() ) );" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>