<templateSet group="VV_test">
  <template name="method test" value="//&lt;editor-fold desc=&quot;.&quot;&gt;&#10;/* &#10; &#10; *      1) используем проверки&#10; *              assertEquals( a,b );          assertNotEquals( a,b );&#10; *              assertTrue( true );           assertFalse( false );&#10; *              assertNull( null );           assertNotNull( null );&#10; *&#10; &#10; */&#10;//&lt;/editor-fold&gt;&#10;&#10;&#10;/**&#10; *      test method&#10; *      !CHANGE_ME_DESCRIPTION!&#10; *      &#10; * &lt;pre&gt;{@code&#10; *&#10;&#10; *&#10; *&#10; *&#10; * }&lt;/pre&gt;&#10; */&#10;@Test&#10;@DisplayName(&quot;description of the test&quot;)&#10;public void $method$_test( )&#10;{&#10;&#10;//&lt;editor-fold desc=&quot;.&quot;&gt;&#10;/*&#10;assertEquals( a,b );          assertNotEquals( a,b );&#10;assertTrue( true );           assertFalse( false );&#10;assertNull( null );           assertNotNull( null );&#10; */&#10;//&lt;/editor-fold&gt;&#10;&#10;&#10;$END$&#10;&#9;&#10;}&#10;&#10;&#10;" description="class method FOR TESTING" toReformat="false" toShortenFQNames="true">
    <variable name="method" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="method test+before+after" value="//&lt;editor-fold desc=&quot;.&quot;&gt;&#10;/* before&#10; &#10; *&#10; *      1) создать макет класса&#10; *              VC_one v_obj2=mock(VC_one.class);&#10; *&#10; &#10; */&#10;//&lt;/editor-fold&gt;&#10;&#10;&#10;/**&#10; * test method&#10; * &lt;pre&gt;{@code&#10; *&#10; &#10; *&#10; * }&lt;/pre&gt;&#10; */&#10;@BeforeEach&#10;public void method_before( )&#10;{&#10;//&lt;editor-fold desc=&quot;.&quot;&gt;&#10;/* &#10;&#10;System.out.println( &quot;_before_&quot; );&#10;&#9;&#10;&#9;init all class variables here&#10;&#10;*/&#10;//&lt;/editor-fold&gt;&#10;&#10;&#10;&#10;c_test= new String(&quot;test string&quot;);&#10;}&#10;&#10;&#10;&#10;&#10;&#10;&#9;//&lt;editor-fold desc=&quot;.&quot;&gt;&#10;        /*  test method&#10;    &#9; *      1) используем проверки&#10;&#9; *              assertEquals( a,b );          assertNotEquals( a,b );&#10;&#9; *              assertTrue( true );           assertFalse( false );&#10;&#9; *              assertNull( null );           assertNotNull( null );&#10;&#9; *&#10;&#9; *&#10;&#9; *&#10;&#9; *&#10;&#9; *      2) when-then pattern&#10;&#9; *              ЕСЛИ на вход методу придет аргумент 10 ТО метод вернет 12&#10;&#9; *              when( v_obj2.f_method1(&quot;10&quot;  ) ).thenReturn( &quot;12&quot; );&#10;&#9; *&#10;&#9; *         when(i.next()).thenReturn(&quot;Hello&quot;).thenReturn(&quot;World&quot;);&#10;&#9; *              Если Вы укажете более одного возвращаемого значения, они будут возвращены методом последовательно,&#10;&#9; *              пока не вернётся последнее, после этого при последующих вызовах будет возвращаться только последнее значение&#10;&#9; *&#10;&#9; *         when (anyString())&#10;&#9; *              любая строка&#10;&#9; &#9; *         when (any(VV.class))&#10;&#9; *              любой объект класса&#10;&#9; *&#10;&#9; *         @Test(expected=Exception.class)&#10;&#9; *         doThrow(new Exception () ).when(v_obj2).f_test();&#10;&#9; *              вернуть эксепшен у пустого метода&#10;&#9; *&#10;&#9; *&#10;&#9; *      3) мы проверяем что в макете был реально вызван данный метод, иначе тест провалится&#10;&#9; *              verify( v_obj2 ).f_test();&#10;&#9; *&#10;&#9; *&#10;&#9; *      4) узнать параметр переданный вызванному методу макета&#10;&#9; *              //создаем шпион для Item&#10;&#9; *               ArgumentCaptor&lt;Item&gt; v_zahvat=ArgumentCaptor.forClass( Item.class );&#10;&#9; *               //создаем макет для некого класса&#10;&#9; *               mySessionStorage v_1=mock( mySessionStorage.class);&#10;&#9; *               //где то в коде методу макета передадут Item&#10;&#9; *               v_1.storeTop( new myItem() );&#10;&#9; *               //узнаем в тесте что было передано при вызове storeTop&#10;&#9; *               verify( v_1 ).storeTop( v_zahvat.capture() );&#10;&#9; *               System.out.println( v_zahvat.getValue());&#10;    &#10;    &#10;    &#10;    @Test(expected=Exception.class)&#10;    */&#10;//&lt;/editor-fold&gt;&#10;&#10;&#10;/**&#10; *                             test method&#10; * &lt;pre&gt;{@code&#10; *&#10; &#10; *&#10; *&#10; * }&lt;/pre&gt;&#10; */&#10;&#10;@Test&#10;@DisplayName(&quot;description of the test&quot;)&#10;public void method_test( )&#10;{&#10;//&lt;editor-fold desc=&quot;.&quot;&gt;&#10;/*&#10; &#10; &#10; &#10; */&#10;//&lt;/editor-fold&gt;&#10;&#10;&#10;assertEquals( c_test,&quot;test string&quot; );&#10;}&#10;&#10;&#10;&#10;&#10;//&#9;@AfterEach&#10;//&#9;public void method_after( )&#10;//&#9;&#9;{&#10;//&#9;&#9;//System.out.println( &quot;_after_&quot; );&#9;&#9;&#10;//&#9;&#9;}&#10;&#9;&#9;" description="class method FOR TESTING" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="test assert that" value="assertThat(  ,is(3) );" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="method test2 short" value="//&lt;editor-fold desc=&quot;$methodname$&quot;&gt;&#10;@Test&#10;void $methodname$Test()&#10;&#9;{&#10;&#9;System.out.println( $methodname$( 10 ) );&#10;&#9;}&#10;&#10;int $methodname$( int a)&#10;&#9;{&#10;&#9;return 1;&#9;&#10;&#9;}&#10;//&lt;/editor-fold&gt;" description="class method FOR TESTING" toReformat="false" toShortenFQNames="true">
    <variable name="methodname" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
</templateSet>