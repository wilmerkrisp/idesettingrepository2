<templateSet group="VV_class_fabrics">
  <template name="fabric object immutable" value="/**&lt;pre&gt;&#10; * fabric with object&#10; *&#10; (!) SHALLOW copying of IMMUTABLE-property-objects in constructor&#10; *&#10; * {@code&#10; *&#10; * exapmle 1&#10; *&#10; *           ${NAME} v_obj1 = new ${NAME}(&quot;param&quot;);&#10; *           ${NAME} v_obj2 =  ${NAME}.of(v_obj1);&#10; *&#10; * }&#10; * &lt;/pre&gt;&#10; *&#10; * @param&#10; * @return&#10; */&#10;public static   $class$ copyOf(@NotNull final $class$ object )&#10;{&#10;//&lt;editor-fold desc=&quot;.&quot;&gt;&#10;        /*  &#10;          (*) для mutable objects and NEW-SET-CALL pattern:&#10;                свойство в конструкторе не проверяем -&gt; проверяем в итоговом вызове метода&#10;               в сетере даем возможность обнулить параметр  -&gt; потом в методе для него выставим дефолтное значение&#10;      &#10;          (*) для immutable objects and NEW-CALL pattern:&#10;                (1)свойство в конструкторе проверяем  -&gt; в итоговом вызове НЕ проверяем&#10;                Objects.requireNonNull( object.stringTwo );&#10;                assertForNullProperties_(this);&#10;                assertForValidProperties_(this);&#10;                assertForConsistencyProperties_(this);    &#10;     &#10;     &#10;          (*) для param receive strategy:&#10;                (1) Objects.requireNonNull(p_1);&#10;&#9;            (2) String p_2= (p_1 == null)? new String() : p_1;&#10;          &#10;        */&#10;//&lt;/editor-fold&gt;&#10;&#10;&#10;&#10;&#10;return new $class$  (  object  );&#10;}&#10;    &#10;    " description="copyOf(@NotNull final ${NAME} object )" toReformat="false" toShortenFQNames="true">
    <variable name="class" expression="className()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="fabric object mutable" value="/**&lt;pre&gt;&#10; * fabric with object&#10; *&#10; (!) SHALLOW copying of IMMUTABLE-property-objects in constructor&#10; *&#10; * {@code&#10; *&#10; * exapmle 1&#10; *&#10; *           ${NAME} v_obj1 = new ${NAME}(&quot;param&quot;);&#10; *           ${NAME} v_obj2 =  ${NAME}.of(v_obj1);&#10; *&#10; * }&#10; * &lt;/pre&gt;&#10; *&#10; * @param&#10; * @return&#10; */&#10;public static  $class$ copyOf(@NotNull final $class$ object )&#10;{&#10;//&lt;editor-fold desc=&quot;.&quot;&gt;&#10;        /*  &#10;          (*) для mutable objects and NEW-SET-CALL pattern:&#10;                свойство в конструкторе не проверяем -&gt; проверяем в итоговом вызове метода&#10;               в сетере даем возможность обнулить параметр  -&gt; потом в методе для него выставим дефолтное значение&#10;      &#10;          (*) для immutable objects and NEW-CALL pattern:&#10;                (1)свойство в конструкторе проверяем  -&gt; в итоговом вызове НЕ проверяем&#10;                Objects.requireNonNull( object.stringTwo );&#10;                assertForNullProperties_(this);&#10;                assertForValidProperties_(this);&#10;                assertForConsistencyProperties_(this);    &#10;     &#10;     &#10;          (*) для param receive strategy:&#10;                (1) Objects.requireNonNull(p_1);&#10;&#9;            (2) String p_2= (p_1 == null)? new String() : p_1;&#10;          &#10;        */&#10;//&lt;/editor-fold&gt;&#10;&#10;&#10;&#10;&#10;&#10;return new $class$  (  object  );&#10;}&#10;" description="copyOf(@NotNull final ${NAME} object )" toReformat="false" toShortenFQNames="true">
    <variable name="class" expression="className()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="fabric all params immutable" value="/**&lt;pre&gt;&#10; * fabric with  ALL PARAMS&#10; *&#10;&#10; * &lt;/pre&gt;&#10; *&#10; * @param&#10; */&#10;public static  $class$ of(@NotNull final String stringTwo   )&#10;{&#10;//&lt;editor-fold desc=&quot;.&quot;&gt;&#10;        /* &#10;        &#10;        log_.debug   ( stringTwo);&#10;        throw new VX_onCreation_exception( &quot; specialno v kinstruktore &quot; );&#10;        &#10;        &#10;           (*) для mutable objects and NEW-SET-CALL pattern:&#10;                свойство в конструкторе не проверяем -&gt; проверяем в итоговом вызове метода&#10;                в сетере даем возможность обнулить параметр  -&gt; потом в методе для него выставим дефолтное значение&#10;     &#10;          (*) для immutable objects and NEW-CALL pattern:&#10;                (1)свойство в конструкторе проверяем  -&gt; в итоговом вызове НЕ проверяем&#10;                Objects.requireNonNull( object.stringTwo );&#10;                assertForNullProperties_(this);&#10;                assertForValidProperties_(this);&#10;                assertForConsistencyProperties_(this);    &#10;     &#10;     &#10;          (*) для param receive strategy:&#10;                (1) Objects.requireNonNull(p_1);&#10;&#9;            (2) String p_2= (p_1 == null)? new String() : p_1;&#10;          &#10;        */&#10;//&lt;/editor-fold&gt;&#10;&#10;&#10;&#10;return new $class$ ( stringTwo    );&#10;&#9;&#10;}" description="of(@NotNull final String stringTwo   )" toReformat="false" toShortenFQNames="true">
    <variable name="class" expression="className()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="fabric all params mutable" value="/**&lt;pre&gt;&#10; * fabric with  ALL PARAMS&#10; *&#10; &#10; *&#10; &lt;/pre&gt;&#10; *&#10; * @param&#10; */&#10;public static  $class$ of(@Nullable final String stringTwo   )&#10;{&#10;//&lt;editor-fold desc=&quot;.&quot;&gt;&#10;        /* &#10;        &#10;        log_.debug   ( stringTwo);&#10;        throw new VX_onCreation_exception( &quot; specialno v kinstruktore &quot; );&#10;        &#10;        &#10;           (*) для mutable objects and NEW-SET-CALL pattern:&#10;                свойство в конструкторе не проверяем -&gt; проверяем в итоговом вызове метода&#10;                в сетере даем возможность обнулить параметр  -&gt; потом в методе для него выставим дефолтное значение&#10;     &#10;          (*) для immutable objects and NEW-CALL pattern:&#10;                (1)свойство в конструкторе проверяем  -&gt; в итоговом вызове НЕ проверяем&#10;                Objects.requireNonNull( object.stringTwo );&#10;                assertForNullProperties_(this);&#10;                assertForValidProperties_(this);&#10;                assertForConsistencyProperties_(this);    &#10;     &#10;     &#10;          (*) для param receive strategy:&#10;                (1) Objects.requireNonNull(p_1);&#10;&#9;            (2) String p_2= (p_1 == null)? new String() : p_1;&#10;          &#10;        */&#10;//&lt;/editor-fold&gt;&#10;&#10;&#10;&#10;&#10;return new $class$ (   stringTwo  );&#10;&#9;&#10;}" description="of(@Nullable final String stringTwo   )" toReformat="false" toShortenFQNames="true">
    <variable name="class" expression="className()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="fabric object immutable deepCopy" value="/**&lt;pre&gt;&#10; * fabric with object (deep copy)&#10; *&#10; (!) DEEP copying of IMMUTABLE-property-objects in constructor&#10; *&#10; * {@code&#10; *&#10; * exapmle 1&#10; *&#10; *           ${NAME} v_obj1 = new ${NAME}(&quot;param&quot;);&#10; *           ${NAME} v_obj2 =  ${NAME}.of(v_obj1);&#10; *&#10; * }&#10; * &lt;/pre&gt;&#10; *&#10; * @param&#10; * @return&#10; */&#10;public static   $class$ deepCopyOf(@NotNull final $class$ object )&#10;{&#10;//&lt;editor-fold desc=&quot;.&quot;&gt;&#10;        /*  &#10;          (*) для mutable objects and NEW-SET-CALL pattern:&#10;                свойство в конструкторе не проверяем -&gt; проверяем в итоговом вызове метода&#10;               в сетере даем возможность обнулить параметр  -&gt; потом в методе для него выставим дефолтное значение&#10;      &#10;          (*) для immutable objects and NEW-CALL pattern:&#10;                (1)свойство в конструкторе проверяем  -&gt; в итоговом вызове НЕ проверяем&#10;                Objects.requireNonNull( object.stringTwo );&#10;                assertForNullProperties_(this);&#10;                assertForValidProperties_(this);&#10;                assertForConsistencyProperties_(this);    &#10;     &#10;     &#10;          (*) для param receive strategy:&#10;                (1) Objects.requireNonNull(p_1);&#10;&#9;            (2) String p_2= (p_1 == null)? new String() : p_1;&#10;          &#10;        */&#10;//&lt;/editor-fold&gt;&#10;&#10;&#10;&#10;//we uses Apache Commons library for deep copy&#10;return new $class$  (   ($class$) SerializationUtils.clone( object )  );&#10;}" description="deepCopyOf(@NotNull final ${NAME} object )" toReformat="false" toShortenFQNames="true">
    <variable name="class" expression="className()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="fabric object mutable deepCopy" value="/**&lt;pre&gt;&#10; * fabric with object (deep copy)&#10; *&#10; (!) DEEP copying of IMMUTABLE-property-objects in constructor&#10; *&#10; * {@code&#10; *&#10; * exapmle 1&#10; *&#10; *           ${NAME} v_obj1 = new ${NAME}(&quot;param&quot;);&#10; *           ${NAME} v_obj2 =  ${NAME}.of(v_obj1);&#10; *&#10; * }&#10; * &lt;/pre&gt;&#10; *&#10; * @param&#10; * @return&#10; */&#10;public static   $class$ deepCopyOf(@NotNull final $class$ object )&#10;{&#10;//&lt;editor-fold desc=&quot;.&quot;&gt;&#10;        /*  &#10;          (*) для mutable objects and NEW-SET-CALL pattern:&#10;                свойство в конструкторе не проверяем -&gt; проверяем в итоговом вызове метода&#10;               в сетере даем возможность обнулить параметр  -&gt; потом в методе для него выставим дефолтное значение&#10;      &#10;          (*) для immutable objects and NEW-CALL pattern:&#10;                (1)свойство в конструкторе проверяем  -&gt; в итоговом вызове НЕ проверяем&#10;                Objects.requireNonNull( object.stringTwo );&#10;                assertForNullProperties_(this);&#10;                assertForValidProperties_(this);&#10;                assertForConsistencyProperties_(this);    &#10;     &#10;     &#10;          (*) для param receive strategy:&#10;                (1) Objects.requireNonNull(p_1);&#10;&#9;            (2) String p_2= (p_1 == null)? new String() : p_1;&#10;          &#10;        */&#10;//&lt;/editor-fold&gt;&#10;&#10;&#10;&#10;&#10;//we uses Apache Commons library for deep copy&#10;return new $class$  (  ($class$) SerializationUtils.clone( object )  );&#10;}    " description="deepCopyOf(@NotNull final ${NAME} object )" toReformat="false" toShortenFQNames="true">
    <variable name="class" expression="className()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="fabric object deep copy Spring" value="BeanUtils.copyProperties( bookingVO , booking );" description="BeanUtils.copyProperties( bookingVO , booking );" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
</templateSet>