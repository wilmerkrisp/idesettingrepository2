<templateSet group="PATTERNS_functional">
  <template name="constructor chaining with lambda" value="&#9;private Function&lt; $lambdaResultType$, $lambdaResultType$ &gt; item2_ = Function.identity();&#10;&#9;&#10;&#9;&#10;&#9;&#10;&#9;/**&#10;&#9; * 1) make app constructors private&#10;&#9; * 2) you can call .with.with many times&#10;&#9; *&#10;&#9; * &lt;pre&gt;{@code&#10;&#9; * var demo2 = Demo2.of( &quot;mystr&quot;).with( String::toUpperCase ).calculate();&#10;&#9; * &#9;   }&lt;/pre&gt;&#10;&#9; *&#10;&#9; * @return tuple item&#10;&#9; */&#10;&#9;public $class$ with( @NotNull UnaryOperator &lt; $lambdaResultType$ &gt; operator )&#10;&#9;&#9;{&#10;&#9;&#9;item2_ =   item2_.andThen( operator );&#10;&#9;&#9;return this;&#10;&#9;&#9;}&#10;&#9;&#10;&#9;&#10;&#9;/**&#10;&#9; * &#10;&#9; *  Function operates on property=item1_&#10;&#9; * &#10;&#9; * */&#10;&#9;public $lambdaResultType$ calculate()&#10;&#9;&#9;{&#10;&#9;&#9;if(item1_.isEmpty() )&#10;&#9;&#9;&#9;return &quot;&quot;;&#10;&#9;&#9;&#10;&#9;&#9;return item2_.apply( item1_ );&#10;&#9;&#9;}&#10;&#9;" description="double value = new TaxCalculator().with(Tax::regional).with(Tax::surcharge).calculate(order);" toReformat="false" toShortenFQNames="true">
    <variable name="lambdaResultType" expression="classNameComplete()" defaultValue="" alwaysStopAt="true" />
    <variable name="class" expression="className()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="method lambda strategy inner error handler" value="&#9;/**&#10;&#9; * lambda strategy / inner handler / inner iterator&#10;&#9; *&#10;&#9; *&#10;&#9; * &lt;pre&gt;{@code&#10;&#9; * String result=errorWrapper( ()-&gt;&quot;no op&quot; );&#10;&#9; * }*&lt;/pre&gt;&#10;&#9; *&#10;&#9; * @param operation&#10;&#9; * &#9;the operation&#10;&#9; *&#10;&#9; * @return the string&#10;&#9; */&#10;&#9;public static &lt;E&gt; E errorWrapper( SupplierWithThrows&lt; E &gt; operation )&#10;&#9;&#9;{&#10;&#9;&#9;try&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;return operation.get();&#10;&#9;&#9;&#9;}&#10;&#9;&#9;catch( IOException|NullPointerException exception ) &#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;throw new RuntimeException( &quot;Please set correct path for file with filename. For example file  \&quot;$buildDir/architecture/classdiagram.dot\&quot; &quot; ,&#10;&#9;&#9;&#9;                            exception );&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}" description="String result=errorWrapper( ()-&gt;&quot;no op&quot; );" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="method lambda wrapper" value="&#9;/**&#10;&#9; * lambda strategy / inner handler / inner iterator&#10;&#9; *&#10;&#9; *&#10;&#9; * &lt;pre&gt;{@code&#10;&#9; * String result=errorWrapper( ()-&gt;&quot;no op&quot; );&#10;&#9; * }*&lt;/pre&gt;&#10;&#9; *&#10;&#9; * @param operation&#10;&#9; * &#9;the operation&#10;&#9; *&#10;&#9; * @return the string&#10;&#9; */&#10;&#9;public static &lt;E&gt; Supplier&lt;E&gt; supplierIOWrapper( SupplierWithThrows&lt; E &gt; operation )&#10;&#9;&#9;{&#10;&#9;&#9;return () -&gt; { &#10;&#9;&#9;&#9;try&#10;&#9;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;return operation.get();&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;catch( IOException | NullPointerException exception )&#10;&#9;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;throw new RuntimeException( &quot;Please set correct path for file with filename. For example file  \&quot;$buildDir/architecture/classdiagram.dot\&quot; &quot; ,&#10;&#9;&#9;&#9;&#9;                            exception );&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;};&#10;&#9;&#9;}" description="String r=supplierWrapper( ()-&gt;&quot;tst&quot; ).get();" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="method config lambda" value="/**&#10; * &#9;    Pervy v = Pervy.config( a -&gt;{&#10; * &#9;&#9;                        a.item1( &quot;1&quot; );&#10; * &#9;&#9;                        a.item2( b -&gt;&#10; *                                                 {&#10; * &#9;&#9;                                 b.item1( &quot;1&quot; );&#10; * &#9;&#9;                                 b.item2( &quot;2&quot; );&#10; *                                                 } );&#10; *                                        } );&#10; * &#10; * */&#10;public static Pervy config(Consumer&lt; Builder &gt; config )&#10;{&#10;Builder builder =new AutoValue_Pervy.Builder();&#10;config.accept( builder );&#10;return builder.build();&#10;}&#10;&#10;&#10;@AutoValue.Builder&#10;public abstract static class Builder&#10;&#9;{&#10;&#9;&#10;&#9;&#10;&#9;&#10;&#9;public abstract Builder item1( final String item1 );&#10;&#9;&#10;&#9;&#10;&#9;&#10;&#9;public abstract Builder item2( final Vtoroy item2 );&#10;&#9;&#10;&#9;public  Builder item2( final Consumer&lt; Vtoroy.Builder &gt; config )&#10;&#9;&#9;{&#10;&#9;&#9;item2( Vtoroy.config( config ) ) ;&#10;&#9;&#9;return this;&#10;&#9;&#9;}&#10;&#9;&#10;&#9;&#10;&#9;&#10;&#9;public abstract Pervy build();&#10;&#9;}" description="String r=supplierWrapper( ()-&gt;&quot;tst&quot; ).get();" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="lazy monad" value="/**&#10;Pub&lt;String&gt; p= DefaultPub.of( &quot;tst&quot; ).map(s-&gt;&quot;VO&quot;+s).map( s-&gt;&quot;VA&quot;+s );&#10;p.subscribe( System.out::println );&#10;*/&#10;&#10;&#10;&#10;&#10;public interface Pub&lt;T&gt;&#10;&#9;{&#10;&#9;&#10;&#9;&#10;&#9;&#10;&#9;public void subscribe( Sub&lt;T&gt; s );&#10;&#9;&#10;&#9;&#10;&#9;&#10;&#9;public static &lt;E&gt; Pub&lt;E&gt; of( E message )&#10;&#9;&#9;{&#10;&#9;&#9;return new Pub&lt;&gt;()&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;@Override&#10;&#9;&#9;&#9;public void subscribe( final Sub&lt;E&gt; s )&#10;&#9;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;s.onNext( message );&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;};&#10;&#9;&#9;}&#10;&#9;&#10;&#9;&#10;&#9;&#10;&#9;default &lt;R&gt; Pub&lt;R&gt; map( Function&lt;T,R&gt; t )&#10;&#9;&#9;{&#10;&#9;&#9;return lift( DefaultMap.of( t )::transform );&#10;&#9;&#9;}&#10;&#9;&#10;&#9;&#10;&#9;&#10;&#9;default &lt;R&gt; Pub&lt;R&gt; lift( Function&lt;Sub&lt;R&gt;,Sub&lt;T&gt;&gt; transform )&#10;&#9;&#9;{&#10;&#9;&#9;Pub&lt;T&gt; self = this;&#10;&#9;&#9;return new Pub&lt;R&gt;()&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;@Override&#10;&#9;&#9;&#9;public void subscribe( final Sub&lt;R&gt; s )&#10;&#9;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;Sub&lt;T&gt; head_sbscrbr = transform.apply( s );&#10;&#9;&#9;&#9;&#9;self.subscribe( head_sbscrbr );&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;};&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#10;&#10;&#10;public interface Sub&lt;T&gt;&#10;&#9;{&#10;&#9;&#10;&#9;void onNext(T o);&#10;&#9;&#9;&#10;&#9;}&#10;&#10;&#10;&#10;&#10;public class DefaultMap&lt;T, R&gt;&#10;&#9;{&#10;&#9;&#10;&#9;&#10;&#9;&#10;&#9;Function&lt;T,R&gt; transform;&#10;&#9;&#10;&#9;&#10;&#9;&#10;&#9;private DefaultMap()&#10;&#9;&#9;{&#10;&#9;&#9;}&#10;&#9;&#10;&#9;&#10;&#9;&#10;&#9;private DefaultMap( Function&lt;T,R&gt; f )&#10;&#9;&#9;{&#10;&#9;&#9;transform = f;&#10;&#9;&#9;}&#10;&#9;&#10;&#9;&#10;&#9;&#10;&#9;public static &lt;E, V&gt; DefaultMap&lt;E,V&gt; of( Function&lt;E,V&gt; f )&#10;&#9;&#9;{&#10;&#9;&#9;return new DefaultMap&lt;E,V&gt;( f );&#10;&#9;&#9;}&#10;&#9;&#10;&#9;&#10;&#9;&#10;&#9;Sub&lt;T&gt; transform( Sub&lt;R&gt; source )&#10;&#9;&#9;{&#10;&#9;&#9;return new Sub&lt;T&gt;()&#10;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;@Override&#10;&#9;&#9;&#9;public void onNext( final T o )&#10;&#9;&#9;&#9;&#9;{&#10;&#9;&#9;&#9;&#9;source.onNext( transform.apply( o ) );&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;};&#10;&#9;&#9;}&#10;&#9;&#9;&#10;&#9;&#9;&#10;&#9;}&#10;" description="aka rxjava" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="trampoline" value="import cyclops.control.Trampoline;&#10;import static cyclops.control.Trampoline.done;&#10;import static cyclops.control.Trampoline.more;&#10;&#10;&#10;public Trampoline&lt;Integer&gt; fibonachiTrampoline( int n )&#10;{&#10;//printStackTrace();&#10;&#10;if( n &lt;= 1 )&#10;&#9;return done( 1 );&#10;else&#10;&#9;{&#10;&#9;var t1 = more( () -&gt; fibonachiTrampoline( n - 1 ) );&#10;&#9;var t2 = more( () -&gt; fibonachiTrampoline( n - 2 ) );&#10;&#9;var z  = more( () -&gt; t1.zip( t2 , ( a , b ) -&gt; a + b ) );&#10;&#9;&#10;&#9;return z;&#10;&#9;}&#10;&#9;&#10;}&#10;&#10;@Test&#10;void fibonachiRecursionTrampolineTest()&#10;{&#10;System.out.println( &quot;trampolined fibonachi&quot; );&#10;&#10;IntStream.range( 0 , 10 )&#10;         .forEach( ( i ) -&gt;&#10;                   {&#10;                   System.out.println( fibonachiTrampoline( i ).get() );&#10;                   } );&#10;&#9;&#10;}" description="cyclops more done" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="memoize" value="Map&lt;Integer,Integer&gt; cache =new HashMap&lt;&gt;(  );&#10; &#10;//return do(i)&#10;return cache.computeIfAbsent(n, i-&gt;do(i) );" description="based on HashMap" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="memoizer_trampoline" value="//import life.expert.common.async.memoizer.MemoizedConcurrently;&#10;&#10;&#10;&#9;private static final CompletableFuture&lt;Long&gt; ONE = CompletableFuture.completedFuture( 1L );&#10;&#9;&#10;&#9;private final Function&lt;Long,CompletableFuture&lt;Long&gt;&gt; memoized = MemoizedConcurrently.of( this::fib );&#10;&#9;&#10;&#9;&#10;&#9;public CompletableFuture&lt;Long&gt; fib( Long n )&#10;&#9;&#9;{&#10;&#9;&#9;if( n &lt;= 2 )&#10;&#9;&#9;&#9;return ONE;&#10;&#9;&#9;return memoized.apply( n - 1 )&#10;&#9;&#9;             .thenCompose( x -&gt; memoized.apply( n - 2 )&#10;&#9;&#9;                                      .thenApply( y -&gt; x + y ) );&#10;&#9;&#9;}&#10;&#10;&#10;@Test&#10;void fibonachiMemoized5Test()&#10;{&#10;&#10;//&#9;&#9;System.out.println( new Fibonacci().fib( 50L )&#10;//&#9;&#9;                                   .join() ); //20365011074&#10;long l=new Fibonacci().fib( 50L )&#10;                      .join();&#10;assertEquals( l ,12586269025L );&#10;}" description="for multiple recursion" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="memoize for recursion" value="Map&lt;Integer,Integer&gt; cache =new HashMap&lt;&gt;(  );&#10;&#10;if( cache.containsKey( n ) )&#10;&#9;return cache.get( n );&#10;else&#10;&#9;{&#10;&#9;var r = fibonachiMemoized( n - 2 ) + fibonachiMemoized( n - 1 );&#10;&#9;cache.put( n , r );&#10;&#9;return r;&#10;&#9;}" description="based on HashMap" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
</templateSet>