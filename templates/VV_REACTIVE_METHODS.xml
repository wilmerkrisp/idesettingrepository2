<templateSet group="VV_REACTIVE_METHODS">
  <template name="rx method Mono+try LOGERROR v1" value="public Mono&lt;String&gt; $method$( final String string )&#10;{&#10;/*&#10;* - отфильтруем пустую строку но никак не логируем&#10;* &#10;* - проглотим ошибку метода2 но залогируем&#10;* &#10;* */&#10;return Mono.justOrEmpty( string )&#10;           .filter( StringUtils::isNotBlank )&#10;           //.single()                                                                                     &#10;           //.onErrorResume( logAtWarningFunction( &quot;$class$.$method$(empty argument)&quot; , empty() ) )       &#10;           .log(&quot;debug&quot; , Level.FINE , SignalType.ON_NEXT )&#10;           .map( this::$method$_ ).onErrorContinue( logAtErrorBiConsumer( &quot;$class$.$method$&quot; ) ); &#10;&#9; //.onErrorResume( logAtErrorFunction( &quot;ERRORR:&quot;,  never() ) ); &#10;// todo postcondition check of output result&#10;}&#10;&#10;&#10;public String $method$_( final String string )&#10;{&#10;//throw new RuntimeException( &quot; cause &quot; );&#10;return &quot;otvet+&quot; + string;&#10;}&#10;" description="Mono.justOrEmpty( string )" toReformat="false" toShortenFQNames="true">
    <variable name="class" expression="className()" defaultValue="" alwaysStopAt="false" />
    <variable name="method" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="rx method Mono" value="public Mono&lt;String&gt; $method$( final String string )&#10;{&#10;/*&#10;* - отфильтруем пустую строку&#10;* - на выходе проверим что ровно одно значение (а не пустое отфильтрованное), и сгенерим ошибку&#10;* - проглотим ошибку, но залогировав&#10;* &#10;* - ошибка в методе2 не обрабатывается и выходит наверх (но ответ метода может быть пустым)&#10;* &#10;* */&#10;return Mono.justOrEmpty( string )&#10;           .filter( StringUtils::isNotBlank )&#10;           .single()&#10;           .onErrorResume( logAtWarningFunction( &quot;$class$.$method$(empty argument)&quot; , never() ) )&#10;           .log(&quot;debug&quot; , Level.FINE , SignalType.ON_NEXT )&#10;           .flatMap( this::method2_ );&#10;// todo postcondition check of output result&#10;}&#10;&#10;&#10;public Mono&lt;String&gt; $method$_( final String string )&#10;{&#10;//throw new RuntimeException( &quot; cause &quot; );&#10;return Mono.justOrEmpty(&quot;otvet+&quot; + string);&#10;}&#10;" description="REACTOR supplier-&gt;try" toReformat="false" toShortenFQNames="true">
    <variable name="class" expression="className()" defaultValue="" alwaysStopAt="false" />
    <variable name="method" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="rx method Mono+try LOGERROR v2" value="public Mono&lt;String&gt; $method$( final String string )&#10;{&#10;/*&#10;* - отфильтруем пустую строку&#10;* &#10;* - при ошибке в методе, проглотим его но залогируем&#10;* */&#10;return  justOrEmpty( string )&#10;&#9;     .flux()&#10;           .takeWhile( StringUtils::isNotBlank )&#10;           .log( &quot;debug&quot;, Level.FINE, SignalType.ON_NEXT )&#10;           .map( this::$method$_ ).onErrorContinue( logAtErrorBiConsumer( &quot;$class$.$method$&quot; ) );                                 // если плохо, если $method$_  вернет null&#10;&#9;   //.flux.flatMap( nullableFunction(this::$method$_) ).onErrorContinue( logAtErrorBiConsumer( &quot;$class$.$method$&quot; ) );           // если нормально для  $method$_  вернуть null&#10;//.flatMap( t -&gt; fromSupplier( ()-&gt;someMethod2( t ) ).onErrorResume( logAtErrorFunction( &quot;arg:&quot; + t , empty() ) ) );   &#10;// todo postcondition check of output result&#10;}&#10;&#10;&#10;public String $method$_( final String string )&#10;{&#10;//throw new RuntimeException( &quot; cause &quot; );&#10;return &quot;otvet+&quot; + string;&#10;}&#10;" description="Flux.from( justOrEmpty( string ) )" toReformat="false" toShortenFQNames="true">
    <variable name="class" expression="className()" defaultValue="" alwaysStopAt="false" />
    <variable name="method" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="rx method Mono+try UPERROR" value="public Mono&lt;String&gt; $method$( final String string )&#10;{&#10;/*&#10; * - отфильтруем пустую строку&#10; * - на выходе проверим что ровно одно значение (а не пустое отфильтрованное), и сгенерим ошибку&#10; * &#10;* -  ошибка в методе2 не обрабатывается и выходит наверх, null значение не допускается&#10;* */&#10;return  justOrEmpty( string )&#10;           .filter( StringUtils::isNotBlank )&#10;           .single().onErrorMap( illegalArgumentException( &quot;Invalid param1&quot; ) )&#10;           .log( &quot;debug&quot;, Level.FINE, SignalType.ON_NEXT )&#10;           .map(  this::$method$_  )                           // если плохо, если $method$_  вернет null&#10;           //.flatMap( nullableFunction( this::$method$_ ) )  // если нормально для  $method$_  вернуть null&#10;           .single();&#10;// todo postcondition check of output result&#10;}&#10;&#10;&#10;public String $method$_( final String string )&#10;{&#10;//throw new RuntimeException( &quot; cause &quot; );&#10;return &quot;otvet+&quot; + string;&#10;}&#10;" description="REACTOR supplier-&gt;try" toReformat="false" toShortenFQNames="true">
    <variable name="method" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="rx method Mono+try UPERROR 3PARAMS" value="public Mono&lt;String&gt; $method$( final String string1 ,&#10;&#9;&#9;&#9;&#9;final String string2 ,&#10;&#9;&#9;&#9;&#9;final String string3 )&#10;{&#10;//@formatter:off&#10;return zip( justOrEmpty( string1 ).filter( StringUtils::isNotBlank ).single().onErrorMap( illegalArgumentException( &quot;Invalid param1&quot; ) ),&#10;            justOrEmpty( string2 ).filter( StringUtils::isNotBlank ).single().onErrorMap( illegalArgumentException( &quot;Invalid param2&quot; ) ) ,&#10;            justOrEmpty( string3 ).filter( StringUtils::isNotBlank ).single().onErrorMap( illegalArgumentException( &quot;Invalid param3&quot; ) ) )&#10;&#9;                .map( TupleUtils.function( this::$method$_  )).single() ;&#10;//@formatter:on&#10;// todo postcondition check of output result&#10;}&#10;&#10;&#10;&#10;public String $method$_( final String string1 ,&#10;&#9;&#9;&#9;final String string2 ,&#10;&#9;&#9;&#9;final String string3 )&#10;&#9;{&#10;&#9;//throw new RuntimeException( &quot; cause &quot; );&#10;&#9;return &quot;otvet+&quot; + string1 + string2 + string3;&#10;&#9;}&#10;&#10;&#10;" description="REACTOR supplier-&gt;try" toReformat="false" toShortenFQNames="true">
    <variable name="method" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="rx method mono int-&gt;PositiveInteger" value="public FLux&lt;String&gt; $method$( final int width,int height )&#10;{&#10;var w      = PositiveInteger.monoOf( width );&#10;var h      = PositiveInteger.monoOf( height );&#10;var canvas = Flux.zip( w , h )&#10;                 .flatMap( TupleUtils.function( TerminalDrawingCanvasEntity::monoOf ) );&#10;return canvas;&#10;// todo postcondition check of output result&#10;}&#10;&#10;" description="REACTOR supplier-&gt;try" toReformat="false" toShortenFQNames="true">
    <variable name="method" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="rx postcondition mono1old" value=".single() /*verify postcondition*/&#10;          .checkpoint( &quot;$classname$.$methodname$.$END$ &quot; )&#10;" description=".single().checkpoint()" toReformat="false" toShortenFQNames="true">
    <variable name="classname" expression="qualifiedClassName()" defaultValue="" alwaysStopAt="false" />
    <variable name="methodname" expression="methodName()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="rx postcondition mono2old" value=".filter( not( String::isBlank ) )/*verify postcondition*/&#10;.single()&#10;          .checkpoint( &quot;$classname$.$methodname$.$END$ &quot; )&#10;" description=".filter().single().checkpoint()" toReformat="false" toShortenFQNames="true">
    <variable name="classname" expression="qualifiedClassName()" defaultValue="" alwaysStopAt="false" />
    <variable name="methodname" expression="methodName()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="rx postcondition flux" value=".takeWhile( not( String::isBlank ) )/*verify postcondition*/&#10;.switchIfEmpty( illegalStateError( &quot;$classname$.$methodname$.$END$&quot; ) )&#10;" description=".takeWhile().switchIfEmpty()" toReformat="false" toShortenFQNames="true">
    <variable name="classname" expression="qualifiedClassName()" defaultValue="" alwaysStopAt="false" />
    <variable name="methodname" expression="methodName()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="rx postcondition mono" value=".filter( not( String::isBlank ) )/*verify postcondition*/&#10;.switchIfEmpty( illegalStateMonoError( &quot;$classname$.$methodname$.$END$&quot; ) )&#10;" description=".filter().switchIfEmpty()" toReformat="false" toShortenFQNames="true">
    <variable name="classname" expression="qualifiedClassName()" defaultValue="" alwaysStopAt="false" />
    <variable name="methodname" expression="methodName()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
</templateSet>