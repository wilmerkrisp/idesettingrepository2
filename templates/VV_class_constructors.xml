<templateSet group="VV_class_constructors">
  <template name="constructor default private" value="//&lt;editor-fold desc=&quot;.&quot;&gt;&#10;/* constructors&#10; &#10; 0) не следует вызывать конструктор без параметров, тк значения свойств обязательно должны быть инициализированы явно &#10;*/&#10;//&lt;/editor-fold&gt;&#10;&#10;&#10;private $class$ ()&#10;&#9;{&#10;&#9;//&lt;editor-fold desc=&quot;.&quot;&gt;&#10;        /* constructors&#10;    &#10;        super()&#10;        throw new UnsupportedOperationException( &quot;Please use constructor with parameters.&quot; );&#10;        */&#10;&#9;//&lt;/editor-fold&gt;&#10;&#9;&#10;&#9;throw new UnsupportedOperationException( &quot;Please use constructor with parameters.&quot; );&#10;&#9;///log_.error(&quot;Dont use this PRIVATE constructor. Please use constructor with parameters.&quot;);&#10;&#9;///stringTwo=null;&#10;&#9; &#10;&#9;&#10;&#9;}" description="for IMmutable classes" toReformat="false" toShortenFQNames="true">
    <variable name="class" expression="className()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="constructor default public" value="//&lt;editor-fold desc=&quot;.&quot;&gt;&#10;/* constructors&#10;&#10;0) перегенерировать javadoc MAC8+fixDocComment&#10;&#10;2) применимы следующие модификаторы доступа:&#10;&#9;private&#9;&#9;также является final&#10;&#9;public&#10;&#9;protected&#9;также является package&#10;&#9;_package_ &#9;по-умолчанию&#10;&#9;&#10;0) throws Exception, VX_myxception  &#10;&#10;0) constructor is a static method&#10;0) constructor is not template method, inside constructor CALL only final,private,super methods&#10;*/&#10;//&lt;/editor-fold&gt;&#10;&#10;&#10;/**&lt;pre&gt;&#10; *   constructor default&#10; *   !CHANGE_ME_DESCRIPTION!   &#10; *&#10; *  {@code&#10; *&#10; * exapmle 1&#10; *&#10; *           $class$ v_obj = new $class$();&#10; *&#10; *&#10; * } &#10; &lt;/pre&gt;*/&#10;public $class$ ()&#10;&#9;{&#10;&#9;//&lt;editor-fold desc=&quot;.&quot;&gt;&#10;&#9;/*&#10;&#9;super();&#10;&#9;this(&quot;&quot;)&#10;&#9;log_.debug   ( &quot;default&quot; );&#10;&#9; &#10;&#9; &#10;&#9; */&#10;&#9;//&lt;/editor-fold&gt;&#10;&#9;&#10;&#9; &#10;&#9;&#10;&#9;}&#10;" description="for mutable classes" toReformat="false" toShortenFQNames="true">
    <variable name="class" expression="className()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="constructor all params immutable" value="//&lt;editor-fold desc=&quot;.&quot;&gt;&#10;/* copy constructor&#10;&#10;&#10;//      public privateFinal protectedPackage _package_&#10;//      throws Exception, VX_myxception&#10;&#10;*/&#10;//&lt;/editor-fold&gt;&#10;&#10;/**&lt;pre&gt;&#10; *      constructor with all params&#10; *      !CHANGE_ME_DESCRIPTION!&#10; *      &#10; *      (!) SHALLOW COPYING OF OBJECT IN CONSTRUCTOR &#10; *      &#10; *  {@code&#10; *&#10; * &#10; * example 1&#10; * &#10; *              $class$ v_obj = new $class$(&quot;param&quot;);&#10; *         &#10; *&#10; * example 2&#10; * &#10; *              - constructor is a static method&#10; *              - constructor is not template method, inside constructor CALL only final,private,super methods&#10; *&#10; * &#10; * }       ПОМНИ СГЕНЕРИТЬ JAVADOC MAC8+fixDocComment И УБРАТЬ ЭТОТ ТЕКСТ&#10; * &#10; * &#10; * &#9; * @param p_i&#10; * &#9; * @throws NullPointerException if argument nullable&#10; * &#9; * @throws IllegalArgumentException if argument empty&#10; * &#9; &#10; *&#10; &lt;/pre&gt;*/&#10;public   $class$(@NotNull final String p_1 )                    &#10;&#9;{&#10;&#9;//&lt;editor-fold desc=&quot;.&quot;&gt;&#10;&#9;/*  check inconsistency in constructor of immutable object&#10;&#9;&#10;&#9;ПАТТЕРН NEW-CALL В неМУТАБЕЛЬНЫХ КЛАССАХ&#10;&#9;-   следует проектировать типы так чтобы объекты не могли существовать в недопустимом состоянии&#10;&#9;    - поэтому следует проверять консистентность объекта в конструкторе и вызывать IllegalStateException &#10;&#9;&#10;&#9;-   в конструкторе сразу задаются все параметры требуемые для настройки объекта&#10;&#9;  - настройки не могут быть изменены после инициализации в конструкторе&#10;&#9;            &#10;&#9;throw new IllegalStateException( item1+item2 ); &#10;&#9;&#10;&#9;&#10;&#9;нужно использовать вызов конструктора со всеми параметрами&#10;&#9;&#9;this( )&#10;&#9;&#10;&#9;&#9; &#10;&#9;throw new Exception( &quot;vError&quot; );&#10;&#9;super(p_1); OR this(p_1,&quot;&quot;)&#10;&#9;log_.debug   ( &quot;$class$  CONSTRUCTOR: &quot; +p_1);&#10;&#9;&#10;&#9;&#10; &#10;          (*) для immutable objects and NEW-CALL pattern:&#10;                (1)свойство в конструкторе проверяем  -&gt; в итоговом вызове НЕ проверяем&#10;                Objects.requireNonNull( object.stringTwo );&#10;&#9;&#9;assertForNullProperties_(this);&#10;                assertForValidProperties_(this);&#10;&#9;&#9;assertForConsistencyProperties_(this);&#10;     &#10;     &#10;          (*) для param receive strategy:&#10;                (1) Objects.requireNonNull(p_1);&#10;&#9;            (2) String p_2= (p_1 == null)? new String() : p_1;&#10; &#9;&#10;&#9;&#10;&#9;*/&#10;&#9;//&lt;/editor-fold&gt;&#10;&#9;&#10;&#9;&#10;&#9; &#10;&#9;this( p1 )&#10;&#9;assertForNullProperties_();&#10;&#9;assertForValidProperties_();&#10;&#9;assertForConsistencyProperties_();&#10;&#9;$END$&#10;&#9;}&#10;" description="constructor with parameter / NEW-CALL" toReformat="false" toShortenFQNames="true">
    <variable name="class" expression="className()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="constructor initializer" value="//&lt;editor-fold desc=&quot;.&quot;&gt;&#10;/* initializer&#10;1) initializer called before constructors&#10;*/&#10;//&lt;/editor-fold&gt;&#10;&#10;&#10;{&#10;//&lt;editor-fold desc=&quot;.&quot;&gt;&#10;/*&#10;log_.debug   ( &quot;init&quot; );&#10;stringOne_ = new String(&quot;test string&quot;); &#10; &#10; &#10; */&#10;//&lt;/editor-fold&gt;&#10;&#10; &#10;}" description="default class initializer" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="constructor all params mutable" value="//&lt;editor-fold desc=&quot;.&quot;&gt;&#10;        /* optional for new-set-call: constructor with parameter for mutable&#10;        &#10;        ПАТТЕРН NEW-SET-CALL В МУТАБЕЛЬНЫХ КЛАССАХ&#10;        &#10;        - всегда должна быть возможность выбора:&#10;            1) вызвать конструктор с параметрами&#10;            2) вызвать дефолтный конструктор но затем установить свойства&#10;        &#10;        - constructor is a static method&#10;        - constructor is not template method, inside constructor CALL only final,private,super methods&#10;        &#10;        &#10;        &#10;          (*) для mutable objects and NEW-SET-CALL pattern:&#10;                свойство в конструкторе не проверяем -&gt; проверяем в итоговом вызове метода&#10;                 в сетере даем возможность обнулить параметр  -&gt; потом в методе для него выставим дефолтное значение&#10;    &#10;     &#10;     &#10;         - ! ПОВЕРХНОСТНОЕ КОПИРОВАНИЕ !&#10;    - constructor is a static method&#10;    - constructor is not template method, inside constructor CALL only final,private,super methods&#10;&#10;     public privateFinal protectedPackage _package_&#10;     throws Exception, VX_myxception &#10;     &#10;        */&#10;//&lt;/editor-fold&gt;&#10;&#10;/**&lt;pre&gt;&#10; *      constructor with all params&#10; *      !CHANGE_ME_DESCRIPTION!&#10; *      &#10; *      (!) SHALLOW COPYING OF OBJECT IN CONSTRUCTOR &#10; *      &#10; *  {@code&#10; *&#10; * &#10; * example 1&#10; * &#10; *              $class$ v_obj = new $class$(&quot;param&quot;);&#10; *         &#10; *&#10; * example 2&#10; * &#10; *              - constructor is a static method&#10; *              - constructor is not template method, inside constructor CALL only final,private,super methods&#10; *&#10; * &#10; * }       ПОМНИ СГЕНЕРИТЬ JAVADOC MAC8+fixDocComment И УБРАТЬ ЭТОТ ТЕКСТ&#10; &lt;/pre&gt;*/&#10;public   $class$(@Nullable final String p_1 )                    &#10;&#9;{&#10;&#9;&#10;&#9;//&lt;editor-fold desc=&quot;.&quot;&gt;&#10;        /* &#10;        &#10;        super(p_1);&#10;&#9;&#9;this(p_1,&quot;&quot;)&#10;        log_.debug   ( stringTwo);&#10;        throw new VX_onCreation_exception( &quot; specialno v kinstruktore &quot; );&#10;        &#10;        &#10;          (*) для mutable objects and NEW-SET-CALL pattern:&#10;                свойство в конструкторе не проверяем -&gt; проверяем в итоговом вызове метода&#10;                в сетере даем возможность обнулить параметр  -&gt; потом в методе для него выставим дефолтное значение&#10;     &#10;          (*) для immutable objects and NEW-CALL pattern:&#10;                (1)свойство в конструкторе проверяем  -&gt; в итоговом вызове НЕ проверяем&#10;                Objects.requireNonNull( object.stringTwo );&#10;                assertForNullProperties_(this);&#10;                assertForValidProperties_(this);&#10;                assertForConsistencyProperties_(this);    &#10;     &#10;     &#10;          (*) для param receive strategy:&#10;                (1) Objects.requireNonNull(p_1);&#10;&#9;            (2) String p_2= (p_1 == null)? new String() : p_1;&#10;          &#10;        */&#10;&#9;//&lt;/editor-fold&gt;&#10;&#9;&#10;&#9;&#10;&#9; &#10;&#9;this( p1 )&#10;&#9;logForNullProperties_();&#10;&#9;logForValidProperties_();&#10;&#9;logForConsistencyProperties_();&#10;&#9;$END$&#10;&#9;}&#10;" description="constructor with parameter / NEW-CALL" toReformat="false" toShortenFQNames="true">
    <variable name="class" expression="className()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="class value" value="/*&#10;    @Value означает&#10;        @ToString &#10;        @EqualsAndHashCode &#10;        @AllArgsConstructor&#10;        @FieldDefaults(makeFinal = true, level = AccessLevel.PRIVATE) &#10;        @Getter&#10;* */&#10;@Value&#10;@AllArgsConstructor( access = AccessLevel.PRIVATE )&#10;@Patterns /*pattern matching in vavr*/&#10;@Slf4j" description="lombok value annotation" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="class mutable" value="/*&#10;@Data означает&#10;    @ToString, &#10;    @EqualsAndHashCode,&#10;    @Getter&#10;    @Setter &#10;    @RequiredArgsConstructor&#10;* */&#10;@Data&#10;@Slf4j&#10;@NoArgsConstructor&#10;@AllArgsConstructor" description="lombok value annotation" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
</templateSet>